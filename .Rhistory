lwd = 2,   # thick line
)  }
mean(accSIM30$Accurate)
library(tidyverse)
accSIM30 <- accSIM30 %>%
mutate(m_dev = Accurate-mean(Accurate))
mean(accSIM30$m_dev)
accSIM30 <- accSIM30 %>%
mutate(m_devSQ = m_dev^2)
sum(accSIM30$m_devSQ)
mean(accSIM30$Accurate)
aggregate (Accurate ~ COND, accSIM30, mean)
30*(1.876 - 1.799)^2 + 30*(2.046 - 1.799)^2 + 30*(1.474 - 1.799)^2
aggregate (Accurate ~ COND, accSIM30, sd)
#just showing you that the variance (next) is the standard deviation, squared
.4791969^2
aggregate (Accurate ~ COND, accSIM30, var)
.2296*(30-1) + .3278*(30-1) + .5857*(30-1)
33.15 + 5.18
# mean squares for the model
5.17689/2
# mean squares for the residual
33.1499 / 87
2.588445 / 0.3810333
library(psych)
#we name the function
#in parentheses we list the object that is the dataframe
#the $ sign precedes the specific variable for which we want the information
describe(accSIM30$Accurate)
#It is unnecessary to create an object, but an object allows you to do cool stuff, like write it to a .csv file and use that as a basis for APA style tables
#In this script we can think "Accurate by COND" meaning that the descriptives for accuracy will be grouped by COND which is a categorical variable
#mat = TRUE means we will get the output in matrix (table) form
#digits = 3 means output will be rounded to 3 decimal places
#data = accSIM30 is a different (I think easier) way to identify the object that holds the dataframe
des.mat <- describeBy (Accurate ~ COND, mat=TRUE, digits=3, data=accSIM30)
#describeBy(accSIM30$Accurate, accSIM30$COND, mat=TRUE)
des.mat #let's you see the matrix object
write.csv (des.mat, file="Table1.csv") #optional to write it to a .csv file
shapiro.test(accSIM30$Accurate)
library(car)
#Our set up is similar:  Accurate by condition, followed by the object that holds the dataframe, followed by the instruction to center the analysis around the mean
leveneTest (Accurate ~ COND, accSIM30, center=mean)
accBYcond <- aov(Accurate ~ COND, data = accSIM30) #DV ~ IV  I say, "DV by IV"
summary (accBYcond) #ANOVA output
#the script looks familiar, "Accurate by Condition"
accBYcond <- aov(Accurate ~ COND, data = accSIM30) #DV ~ IV  I say, "DV by IV"
summary (accBYcond) #ANOVA output
names(accBYcond)
model.tables (accBYcond, "means")
plot(accBYcond)
plot(accBYcond)
5.20 / (5.20 + 33.15)
library(lsr)
etaSquared(accBYcond)
contrasts(accSIM30$COND)<-contr.poly(3)
accTrend<-aov(Accurate ~ COND, data = accSIM30)
summary.lm(accTrend)
pairwise.t.test(accSIM30$Accurate, accSIM30$COND, p.adj = "none")
#can swap "bonf" or "holm" for p.adj
posthocPairwiseT(accBYcond, p.adjust.method = "none")
citr:::insert_citation()
citr:::insert_citation()
summary.lm(accBYcond)
#Contrast1  compares Control against the combined effects of Low and High.
contrast1 <- c(-2,1,1)
#Contrast2 excludes Control; compares Low to High.
contrast2 <- c(0,-1,1)
contrasts(accSIM30$COND)<-cbind(contrast1, contrast2)
accSIM30$COND
accPlanned <- aov(Accurate ~ COND, data = accSIM30)
summary.lm(accPlanned)
contrasts(accSIM30$COND)<-cbind(c(-2,1,1), c(0,-1,1))
#Contrast1  compares Control against the combined effects of Low and High.
contrast1 <- c(-2,1,1)
#Contrast2 excludes Control; compares Low to High.
contrast2 <- c(0,-1,1)
#binding the contrasts together
contrasts(accSIM30$COND)<-cbind(contrast1, contrast2)
accSIM30$COND
accPlanned <- aov(Accurate ~ COND, data = accSIM30)
summary.lm(accPlanned)
contrasts(accSIM30$COND)<-cbind(c(-2,1,1), c(0,-1,1))
#create a new object, the ANOVA looks the same, but it will now consider the contrasts
accPlanned <- aov(Accurate ~ COND, data = accSIM30)
summary.lm(accPlanned)
contrasts(accSIM30$COND)<-cbind(c(-2,1,1), c(0,-1,1))
contrasts(accSIM30$COND)<-contr.poly(3)
accTrend<-aov(Accurate ~ COND, data = accSIM30)
summary.lm(accTrend)
set.seed(2021) #sets a random seed so that we get the same results each time
Accurate <- c(rnorm(30, mean=1.18, sd=0.80), rnorm(30, mean=1.83, sd = 0.58), rnorm(30, mean = 1.76, sd = 0.56))#sample size, M and SD for each group
Accurate[Accurate>3]<-3 #set upper bound for DV
Accurate[Accurate<0]<-0 #set lower bound for DV
ID<-factor(seq(1,90)) #IDs for participants
COND<-c(rep("High", 30), rep("Low", 30), rep("Control", 30)) #name factors and identify how many in each group; should be in same order as first row of script
Acc_sim30 <-data.frame(ID, COND, Accurate) #groups the 3 variables into a single df:  ID#, DV, condition
View(Acc_sim30)
#to write it to an outfile
write.table(Acc_sim30, file="newAcc30.csv", sep=",", col.names=TRUE, row.names=FALSE)
#for a .csv file
accSIM30 <- read.csv ("Acc_sim30_df.csv", head = TRUE, sep = ",")
# head=TRUE yields column headings;
# sep = "," tells R that we are using a .csv file (comma separated values)
View(accSIM30)
View(accSIM30)
str(accSIM30)
accSIM30$COND <- factor(accSIM30$COND)
accSIM30$COND <- factor(accSIM30$COND)
accSIM30$COND <- factor(accSIM30$COND)
accSIM30$COND <- factor(accSIM30$COND)
str(accSIM30)
accSIM30$COND <- factor(accSIM30$COND, levels = c("Control", "Low", "High"))
str(accSIM30)
aggregate (Accurate ~ COND, accSIM30, mean)
aggregate (Accurate ~ COND, accSIM30, sd)
library(gplots)
plotmeans (formula = Accurate ~ COND, #plots DV by IV
data = accSIM30, #identifies the data frame
xlab = "Racial Loading Condition", #let's us specify a label for the x-axis
ylab = "Accuracy of Confederate's Impression", #let's us specify a label for the y-axis
n.label = TRUE  #we can even specify the sample size for each level of the group
)
#this code could be more elegantly written in one row
#plotmeans (formula = Accurate ~ COND, data = accSIM30, xlab = "Racial Loading Condition", ylab = "Accuracy of Confederate's Impression", n.label = TRUE)
library(gplots)
plotmeans (formula = Accurate ~ COND, #plots DV by IV
data = accSIM30, #identifies the data frame
xlab = "Racial Loading Condition", #let's us specify a label for the x-axis
ylab = "Accuracy of Confederate's Impression", #let's us specify a label for the y-axis
n.label = FALSE  #we can even specify the sample size for each level of the group
)
#this code could be more elegantly written in one row
#plotmeans (formula = Accurate ~ COND, data = accSIM30, xlab = "Racial Loading Condition", ylab = "Accuracy of Confederate's Impression", n.label = TRUE)
library(gplots)
plotmeans (formula = Accurate ~ COND, #plots DV by IV
data = accSIM30, #identifies the data frame
xlab = "Racial Loading Condition", #let's us specify a label for the x-axis
ylab = "Accuracy of Confederate's Impression", #let's us specify a label for the y-axis
n.label = TRUE  #we can even specify the sample size for each level of the group
)
#this code could be more elegantly written in one row
#plotmeans (formula = Accurate ~ COND, data = accSIM30, xlab = "Racial Loading Condition", ylab = "Accuracy of Confederate's Impression", n.label = TRUE)
boxplot2 (Accurate ~ COND, data = accSIM30, xlab = "Racial Loading Condition", ylab = "Accuracy of Confederate's Impression", n.label = TRUE)
mean(accSIM30$Accurate)
library(tidyverse)
accSIM30 <- accSIM30 %>%
mutate(m_dev = Accurate-mean(Accurate))
mean(accSIM30$m_dev)
accSIM30 <- accSIM30 %>%
mutate(m_devSQ = m_dev^2)
sum(accSIM30$m_devSQ)
mean(accSIM30$Accurate)
aggregate (Accurate ~ COND, accSIM30, mean)
30*(1.876 - 1.799)^2 + 30*(2.046 - 1.799)^2 + 30*(1.474 - 1.799)^2
aggregate (Accurate ~ COND, accSIM30, sd)
#just showing you that the variance (next) is the standard deviation, squared
.4791969^2
aggregate (Accurate ~ COND, accSIM30, var)
.2296*(30-1) + .3278*(30-1) + .5857*(30-1)
33.15 + 5.18
.2296297(30-1) + .3277905(30-1) +0.5857082 (30-1)
.2296297*(30-1) + .3277905*(30-1) +0.5857082*(30-1)
# mean squares for the model
5.17689/2
# mean squares for the residual
33.1499 / 87
2.588445 / 0.3810333
library(psych)
#we name the function
#in parentheses we list the object that is the dataframe
#the $ sign precedes the specific variable for which we want the information
describe(accSIM30$Accurate)
des.mat <- describeBy (Accurate ~ COND, mat=TRUE, digits=3, data=accSIM30)
View(des.mat)
des.mat <- describeBy (Accurate ~ COND, mat=TRUE, digits=3, data=accSIM30)
#describeBy(accSIM30$Accurate, accSIM30$COND, mat=TRUE)
des.mat #let's you see the matrix object
write.csv (des.mat, file="Table1.csv") #optional to write it to a .csv file
write.csv (des.mat, file="Table1.csv") #optional to write it to a .csv file
des.mat #let's you see the matrix object
shapiro.test(accSIM30$Accurate)
library(car)
#Our set up is similar:  Accurate by condition, followed by the object that holds the dataframe, followed by the instruction to center the analysis around the mean
leveneTest (Accurate ~ COND, accSIM30, center=mean)
#the script looks familiar, "Accurate by Condition"
accBYcond <- aov(Accurate ~ COND, data = accSIM30) #DV ~ IV  I say, "DV by IV"
summary (accBYcond) #ANOVA output
names(accBYcond)
model.tables (accBYcond, "means")
plot(accBYcond)
5.20 / (5.20 + 33.15)
library(lsr)
etaSquared(accBYcond)
pairwise.t.test(accSIM30$Accurate, accSIM30$COND, p.adj = "none")
#can swap "bonf" or "holm" for p.adj
summary.lm(accBYcond)
#Contrast1  compares Control against the combined effects of Low and High.
contrast1 <- c(-2,1,1)
#Contrast2 excludes Control; compares Low to High.
contrast2 <- c(0,-1,1)
#binding the contrasts together
contrasts(accSIM30$COND)<-cbind(contrast1, contrast2)
accSIM30$COND
#create a new object, the ANOVA looks the same, but it will now consider the contrasts
accPlanned <- aov(Accurate ~ COND, data = accSIM30)
summary.lm(accPlanned)
contrasts(accSIM30$COND)<-cbind(c(-2,1,1), c(0,-1,1))
contrasts(accSIM30$COND)<-contr.poly(3)
accTrend<-aov(Accurate ~ COND, data = accSIM30)
summary.lm(accTrend)
oneway.test (Accurate ~ COND, data = accSIM30)
library(pwr)
pwr.anova.test (k = 3, f = .25, sig.level = .05, power = .80)
pwr.anova.test (k = 3, f = .386, sig.level = .05, power = .80)
library(apaTables)
# table.number = 1 assigns a table number to the top of the table
# filename = "Table1.doc" writes the table to Microsoft Word and puts it in your project folder
apa.1way.table(iv=COND, dv=Accurate, show.conf.interval = TRUE, data=accSIM30, table.number = 1, filename = "Table1.doc")
apa.aov.table (accBYcond, table.number = 2, filename = "Table2.doc")
plotmeans (formula = Accurate ~ COND, data = accSIM30, xlab = "Racial Loading Condition", ylab = "Accuracy of Confederate's Impression", n.label = TRUE)
plotmeans (formula = Accurate ~ COND, data = accSIM30, xlab = "Racial Loading Condition", ylab = "Accuracy of Confederate's Impression", n.label = FALSE)
1.88 - 1.47#calculating mean difference between control and high
2.05 - 1.47#calculating mean difference between low and high
1.88 - 2.05#calculating mean difference between  control and low
3.5 + 12.5 + 7.5 + 27 + 8.5 + 15 + 8 + 11 + 12 + 13 + 12 + 3 + 6
139-120
options(scipen=999)#eliminates scientific notation
set.seed(210807)#sets the random seed so that we consistently get the same results
#for practice, you could change (or remove) the random seed and try to interpret the results (they should be quite similar)
#There are probe more efficient ways to simulate data.
#Given the information available in the manuscript, my approach was to first create the datasets for each of the racial ethnic groups that were provided and then binding them together.
#First, the data for the students who identified as Asian American
Asian_mu <- c(1.52, 1.72, 2.69, 1.71, 2.14, 2.35, 2.42)
Asian_stddev <- c(2.52, 2.04, 0.47, 0.70, 0.80, 2.41, 3.36)
Asian_corMat <- matrix(c(1.00,  0.69,  0.19,  0.28,  0.32,  0.08,  0.23,
0.69,  1.00,  0.20,  0.29,  0.33,  0.13,  0.25,
0.19,  0.20,  1.00,  0.50,  0.50, -0.04,  0.09,
0.28,  0.29,  0.50,  1.00,  0.76,  0.04,  0.18,
0.32,  0.33,  0.50,  0.76,  1.00,  0.10,  0.21,
0.08,  0.13, -0.04,  0.04,  0.10,  1.00,  0.42,
0.23,  0.25,  0.09,  0.18,  0.21,  0.42,  1.00),
ncol=7)
Asian_covMat <- Asian_stddev %*% t(Asian_stddev) * Asian_corMat
library(MASS)
Asian_dat <- mvrnorm(n = 398, mu = Asian_mu, Sigma = Asian_covMat, empirical = TRUE)
Asian_df <- as.data.frame(Asian_dat)
library(tidyverse)
Asian_df <- rename(Asian_df, OvDisc = V1, mAggr = V2, Neuro = V3, nAff = V4, psyDist = V5, Alcohol = V6, drProb = V7)
Asian_df$RacEth <- "Asian"
#Second, the data for the students who identified as Black/African American
Black_mu <- c(4.45, 3.84, 2.60, 1.84, 2.10, 2.81, 2.14)
Black_stddev <- c(4.22, 3.08, 0.89, 0.80, 0.81, 2.49, 3.24)
Black_corMat <- matrix(c( 1.00,  0.81,  0.17,  0.15,  0.09,  0.05, -0.16,
0.81,  1.00,  0.17,  0.21,  0.11,  0.09, -0.01,
0.17,  0.17,  1.00,  0.59,  0.54,  0.05,  0.24,
0.15,  0.21,  0.59,  1.00,  0.72,  0.12,  0.22,
0.09,  0.11,  0.54,  0.72,  1.00,  0.21,  0.40,
0.05,  0.09,  0.05,  0.12,  0.21,  1.00,  0.65,
-0.16,-0.01,  0.24,  0.22,  0.40,  0.65,  1.00),
ncol = 7)
Black_covMat <- Black_stddev %*% t(Black_stddev) * Black_corMat
Black_dat <- mvrnorm(n = 133, mu = Black_mu, Sigma = Black_covMat, empirical = TRUE)
Black_df <- as.data.frame(Black_dat)
Black_df <- rename(Black_df, OvDisc = V1, mAggr = V2, Neuro = V3, nAff = V4, psyDist = V5, Alcohol = V6, drProb = V7)
Black_df$RacEth <- "Black"
#Third, the data for the students who identified as Latinx American
Latinx_mu <- c(1.56, 2.34, 2.69, 1.81, 2.17, 3.47, 2.69)
Latinx_stddev <- c(2.46, 2.49, 0.86, 0.71, 0.78, 2.59, 3.76)
Latinx_corMat <- matrix(c( 1.00,  0.78,  0.27,  0.36,  0.42, -0.06,  0.08,
0.78,  1.00,  0.33,  0.26,  0.35, -0.11, -0.02,
0.27,  0.33,  1.00,  0.62,  0.64, -0.04,  0.15,
0.36,  0.26,  0.62,  1.00,  0.81, -0.08,  0.17,
0.42,  0.35,  0.64,  0.81,  1.00, -0.06,  0.15,
-0.06,-0.11, -0.04, -0.08, -0.06,  1.00,  0.60,
0.08, -0.02,  0.15,  0.17,  0.15,  0.60,  1.00),
ncol = 7)
Latinx_covMat <- Latinx_stddev %*% t(Latinx_stddev) * Latinx_corMat
Latinx_dat <- mvrnorm(n = 182, mu = Latinx_mu, Sigma = Latinx_covMat, empirical = TRUE)
Latinx_df <- as.data.frame(Latinx_dat)
Latinx_df <- rename(Latinx_df, OvDisc = V1, mAggr = V2, Neuro = V3, nAff = V4, psyDist = V5, Alcohol = V6, drProb = V7)
Latinx_df$RacEth <- "Latinx"
Lui_sim_df <-bind_rows (Asian_df, Black_df, Latinx_df)
df <- Lui_sim_df
str (df)
# A .csv file is uninformed -- it just holds data (and R guesses what it is); respecifying the type of variable will likely need to be completed each time the file is used.
library(tidyverse)
df <- df %>%
mutate(
RacEth = as.factor(RacEth))
#checking the structure of the data
str(df)
tiny_df <-(select (df, mAggr, nAff, psyDist))
#checking the structure of the data
str(df)
set.seed(2021) #sets a random seed so that we get the same results each time
Accurate <- c(rnorm(30, mean=1.18, sd=0.80), rnorm(30, mean=1.83, sd = 0.58), rnorm(30, mean = 1.76, sd = 0.56))#sample size, M and SD for each group
Accurate[Accurate>3]<-3 #set upper bound for DV
Accurate[Accurate<0]<-0 #set lower bound for DV
ID<-factor(seq(1,90)) #IDs for participants
COND<-c(rep("High", 30), rep("Low", 30), rep("Control", 30)) #name factors and identify how many in each group; should be in same order as first row of script
Acc_sim30 <-data.frame(ID, COND, Accurate) #groups the 3 variables into a single df:  ID#, DV, condition
#to write it to an outfile
write.table(Acc_sim30, file="newAcc30.csv", sep=",", col.names=TRUE, row.names=FALSE)
set.seed(2021) #sets a random seed so that we get the same results each time
Accurate <- c(rnorm(30, mean=1.18, sd=0.80), rnorm(30, mean=1.83, sd = 0.58), rnorm(30, mean = 1.76, sd = 0.56))#sample size, M and SD for each group
Accurate[Accurate>3]<-3 #set upper bound for DV
Accurate[Accurate<0]<-0 #set lower bound for DV
ID<-factor(seq(1,90)) #IDs for participants
COND<-c(rep("High", 30), rep("Low", 30), rep("Control", 30)) #name factors and identify how many in each group; should be in same order as first row of script
Acc_sim30 <-data.frame(ID, COND, Accurate) #groups the 3 variables into a single df:  ID#, DV, condition
#to write it to an outfile
write.table(Acc_sim30, file="newAcc30.csv", sep=",", col.names=TRUE, row.names=FALSE)
#for a .csv file
accSIM30 <- read.csv ("Acc_sim30_df.csv", head = TRUE, sep = ",")
# head=TRUE yields column headings;
# sep = "," tells R that we are using a .csv file (comma separated values)
str(accSIM30)
accSIM30$COND <- factor(accSIM30$COND)
str(accSIM30)
accSIM30$COND <- factor(accSIM30$COND, levels = c("Control", "Low", "High"))
str(accSIM30)
aggregate (Accurate ~ COND, accSIM30, mean)
aggregate (Accurate ~ COND, accSIM30, sd)
library(gplots)
plotmeans (formula = Accurate ~ COND, #plots DV by IV
data = accSIM30, #identifies the data frame
xlab = "Racial Loading Condition", #let's us specify a label for the x-axis
ylab = "Accuracy of Confederate's Impression", #let's us specify a label for the y-axis
n.label = TRUE  #we can even specify the sample size for each level of the group
)
#this code could be more elegantly written in one row
#plotmeans (formula = Accurate ~ COND, data = accSIM30, xlab = "Racial Loading Condition", ylab = "Accuracy of Confederate's Impression", n.label = TRUE)
boxplot2 (Accurate ~ COND, data = accSIM30, xlab = "Racial Loading Condition", ylab = "Accuracy of Confederate's Impression", n.label = TRUE)
width <- 7
height <- 4
# params
mu <- c(-4, -.25, 3.5)
sig <- 2
# data
x <- seq(-3,3,.1)
x1 <- x*sig + mu[1]
x2 <- x*sig + mu[2]
x3 <- x*sig + mu[3]
y1 <- dnorm( x1, mu[1], sig )
y2 <- dnorm( x2, mu[2], sig )
y3 <- dnorm( x3, mu[3], sig )
# set up window
plot.new() # create graphics device
plot.window(xlim = c(-10,10), ylim = c(0,.25)) # define plot area
axis(side = 1, # axis located below
col = "gray20",  # coloured gray
at = c(-10,mu,10), # tick marks located at
labels = c("","group 1","group 2","group 3","")
)
# plot densities
lines(x1,y1, type = "l", col = "gray20")
lines(x2,y2, type = "l", col = "gray20")
lines(x3,y3, type = "l", col = "gray20")
# arrows
arrows(
mu[1],.15, # from
mu[2],.15, # to
code = 3,  # arrows on both ends
lwd = 2,   # thick line
)
arrows(
mu[2],.125, # from
mu[3],.125, # to
code = 3,  # arrows on both ends
lwd = 2,   # thick line
)
arrows(
mu[1],.1, # from
mu[3],.1, # to
code = 3,  # arrows on both ends
lwd = 2,   # thick line
)
# title
title(main = "Between-group variation\n(i.e., differences among group means)",
font.main = 1)
width <- 7
height <- 4
# params
mu <- c(-4, -.25, 3.5)
sig <- 2
# data
x <- seq(-3,3,.1)
x1 <- x*sig + mu[1]
x2 <- x*sig + mu[2]
x3 <- x*sig + mu[3]
y1 <- dnorm( x1, mu[1], sig )
y2 <- dnorm( x2, mu[2], sig )
y3 <- dnorm( x3, mu[3], sig )
# set up window
plot.new() # create graphics device
plot.window(xlim = c(-10,10), ylim = c(0,.25)) # define plot area
axis(side = 1, # axis located below
col = "gray20",  # coloured gray
at = c(-10,mu,10), # tick marks located at
labels = c("","group 1","group 2","group 3","")
)
# plot densities
lines(x1,y1, type = "l", col = "gray20")
lines(x2,y2, type = "l", col = "gray20")
lines(x3,y3, type = "l", col = "gray20")
# arrows
x <- 1.5
y <- .135
for (i in 1:3) {
arrows(
mu[i]-x,y, # from
mu[i]+x,y, # to
code = 3,  # arrows on both ends
lwd = 2,   # thick line
)  }
mean(accSIM30$Accurate)
library(tidyverse)
accSIM30 <- accSIM30 %>%
mutate(m_dev = Accurate-mean(Accurate))
mean(accSIM30$m_dev)
accSIM30 <- accSIM30 %>%
mutate(m_devSQ = m_dev^2)
sum(accSIM30$m_devSQ)
mean(accSIM30$Accurate)
aggregate (Accurate ~ COND, accSIM30, mean)
30*(1.876 - 1.799)^2 + 30*(2.046 - 1.799)^2 + 30*(1.474 - 1.799)^2
aggregate (Accurate ~ COND, accSIM30, sd)
#just showing you that the variance (next) is the standard deviation, squared
.4791969^2
aggregate (Accurate ~ COND, accSIM30, var)
.2296*(30-1) + .3278*(30-1) + .5857*(30-1)
33.15 + 5.18
# mean squares for the model
5.17689/2
# mean squares for the residual
33.1499 / 87
2.588445 / 0.3810333
library(psych)
#we name the function
#in parentheses we list the object that is the dataframe
#the $ sign precedes the specific variable for which we want the information
describe(accSIM30$Accurate)
#It is unnecessary to create an object, but an object allows you to do cool stuff, like write it to a .csv file and use that as a basis for APA style tables
#In this script we can think "Accurate by COND" meaning that the descriptives for accuracy will be grouped by COND which is a categorical variable
#mat = TRUE means we will get the output in matrix (table) form
#digits = 3 means output will be rounded to 3 decimal places
#data = accSIM30 is a different (I think easier) way to identify the object that holds the dataframe
des.mat <- describeBy (Accurate ~ COND, mat=TRUE, digits=3, data=accSIM30)
#describeBy(accSIM30$Accurate, accSIM30$COND, mat=TRUE)
des.mat #let's you see the matrix object
write.csv (des.mat, file="Table1.csv") #optional to write it to a .csv file
shapiro.test(accSIM30$Accurate)
library(car)
#Our set up is similar:  Accurate by condition, followed by the object that holds the dataframe, followed by the instruction to center the analysis around the mean
leveneTest (Accurate ~ COND, accSIM30, center=mean)
#the script looks familiar, "Accurate by Condition"
accBYcond <- aov(Accurate ~ COND, data = accSIM30) #DV ~ IV  I say, "DV by IV"
summary (accBYcond) #ANOVA output
names(accBYcond)
model.tables (accBYcond, "means")
plot(accBYcond)
5.20 / (5.20 + 33.15)
library(lsr)
etaSquared(accBYcond)
pairwise.t.test(accSIM30$Accurate, accSIM30$COND, p.adj = "none")
#can swap "bonf" or "holm" for p.adj
summary.lm(accBYcond)
#Contrast1  compares Control against the combined effects of Low and High.
contrast1 <- c(-2,1,1)
#Contrast2 excludes Control; compares Low to High.
contrast2 <- c(0,-1,1)
#binding the contrasts together
contrasts(accSIM30$COND)<-cbind(contrast1, contrast2)
accSIM30$COND
#create a new object, the ANOVA looks the same, but it will now consider the contrasts
accPlanned <- aov(Accurate ~ COND, data = accSIM30)
summary.lm(accPlanned)
contrasts(accSIM30$COND)<-cbind(c(-2,1,1), c(0,-1,1))
contrasts(accSIM30$COND)<-contr.poly(3)
accTrend<-aov(Accurate ~ COND, data = accSIM30)
summary.lm(accTrend)
oneway.test (Accurate ~ COND, data = accSIM30)
library(pwr)
pwr.anova.test (k = 3, f = .25, sig.level = .05, power = .80)
pwr.anova.test (k = 3, f = .386, sig.level = .05, power = .80)
library(apaTables)
# table.number = 1 assigns a table number to the top of the table
# filename = "Table1.doc" writes the table to Microsoft Word and puts it in your project folder
apa.1way.table(iv=COND, dv=Accurate, show.conf.interval = TRUE, data=accSIM30, table.number = 1, filename = "Table1.doc")
1.88 - 1.47#calculating mean difference between control and high
2.05 - 1.47#calculating mean difference between low and high
1.88 - 2.05#calculating mean difference between  control and low
apa.aov.table (accBYcond, table.number = 2, filename = "Table2.doc")
plotmeans (formula = Accurate ~ COND, data = accSIM30, xlab = "Racial Loading Condition", ylab = "Accuracy of Confederate's Impression", n.label = FALSE)
#write the simulated data  as a .csv
write.table(accSIM30, file="accSIM.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
df <- read.csv ("accSSIM30.csv", header = TRUE)
#bring back the simulated dat from a .csv file
df <- read.csv ("accSIM30.csv", header = TRUE)
#bring back the simulated dat from a .csv file
df <- read.csv ("accSIM.csv", header = TRUE)
#write the simulated data  as a .csv
write.table(accSIM30, file="accSIM.csv", sep=",", col.names=TRUE, row.names=FALSE)
#bring back the simulated dat from a .csv file
acc_csv <- read.csv ("accSIM.csv", header = TRUE)
#to save the df as an .rds (think "R object") file on your computer; it should save in the same file as the .rmd file you are working with
saveRDS(accSIM30, "accSIM.rds")
#bring back the simulated dat from an .rds file
acc_RDS <- readRDS("accSIM.rds")
str(acc_csv)
str(acc_RDS)
